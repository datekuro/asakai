require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ArticlesController, type: :controller do

  let!(:user) { create(:user, :skip_confirmation) }

  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      user_id: user.id,
      todo: "サンプルTODO",
      over_work: "残業しない",
      status: "draft",
      published_on: "2019-04-15"
    }
  }

  let(:invalid_attributes) {
    {
      todo: "",
      status: "draft",
      published_on: "2019-04-15"
    }
  }

  describe "not_logged_in" do
    describe "GET #new" do
      it do
        get :new
        expect(response).to redirect_to new_user_session_path
      end
    end

    describe "POST #create" do
      it do
        post :create
        expect(response).to redirect_to new_user_session_path
      end
    end
  end

  describe "logged_in" do
    before { sign_in user }

    describe "GET #index" do
      it "returns a success response" do
        get :index, params: {}
        expect(response).to be_successful
      end
    end

    describe "GET #new" do
      subject { get :new }
      it "returns a success response" do
        expect(subject).to have_http_status(200)
      end

      it "returns a success response" do
        expect(subject).to render_template :new
      end

      it 'assigns' do
        expect(assigns(:article)).to eq @article
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Article" do
          expect {
            post :create, params: {article: valid_attributes}
          }.to change(Article, :count).by(1)
        end

        it "redirects to the root" do
          post :create, params: {article: valid_attributes}
          expect(response).not_to redirect_to(Article.last)
          expect(response).to redirect_to(root_path)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'new' template)" do
          post :create, params: {article: invalid_attributes}
          expect(response).to be_successful
        end
      end
    end

    describe "GET #edit" do
      it "returns a success response" do
        article = Article.create! valid_attributes
        get :edit, params: {id: article.to_param}
        expect(response).to be_successful
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          {
            todo: "edit todo!"
          }
        }

        it "updates the requested article" do
          article = Article.create! valid_attributes
          put :update, params: {id: article.to_param, article: new_attributes}
          article.reload
          expect(article.todo).to eq "edit todo!"
        end

        it "redirects to the article" do
          article = Article.create! valid_attributes
          put :update, params: {id: article.to_param, article: valid_attributes}
          expect(response).to redirect_to(root_path)
        end
      end

      context "with invalid params" do
        it "returns a success response (i.e. to display the 'edit' template)" do
          article = Article.create! valid_attributes
          put :update, params: {id: article.to_param, article: invalid_attributes}
          expect(response).to be_successful
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested article" do
        article = Article.create! valid_attributes
        expect {
          delete :destroy, params: {id: article.to_param}
        }.to change(Article, :count).by(-1)
      end

      it "redirects to the articles list" do
        article = Article.create! valid_attributes
        delete :destroy, params: {id: article.to_param}
        expect(response).to redirect_to(root_path)
      end
    end
  end
end
